{"expireTime":9007200843879946000,"key":"gatsby-plugin-mdx-entire-payload-040cde89dc49b55673edb626187c3f11-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"How can people come to know about what you speak in the podcasts without listening to them?","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":92,"offset":92},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":92,"offset":92},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A half baked solution I figured out is to tweet about the things we speak in the episode occasionally. So, by looking at the twitter feed, one can get a feel for what we actually talk.","position":{"start":{"line":4,"column":1,"offset":94},"end":{"line":4,"column":185,"offset":278},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":94},"end":{"line":4,"column":185,"offset":278},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I built this with the help of ","position":{"start":{"line":6,"column":1,"offset":280},"end":{"line":6,"column":31,"offset":310},"indent":[]}},{"type":"link","title":null,"url":"/github","children":[{"type":"text","value":"[[GitHub]]","position":{"start":{"line":6,"column":32,"offset":311},"end":{"line":6,"column":42,"offset":321},"indent":[]}}],"position":{"start":{"line":6,"column":31,"offset":310},"end":{"line":6,"column":52,"offset":331},"indent":[]}},{"type":"text","value":" Actions. I have an ","position":{"start":{"line":6,"column":52,"offset":331},"end":{"line":6,"column":72,"offset":351},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/aravindballa/learningcurve.dev/blob/master/.github/workflows/tweet.yml","children":[{"type":"text","value":"action","position":{"start":{"line":6,"column":73,"offset":352},"end":{"line":6,"column":79,"offset":358},"indent":[]}}],"position":{"start":{"line":6,"column":72,"offset":351},"end":{"line":6,"column":171,"offset":450},"indent":[]}},{"type":"text","value":" which runs on a cron schedule and runs ","position":{"start":{"line":6,"column":171,"offset":450},"end":{"line":6,"column":211,"offset":490},"indent":[]}},{"type":"inlineCode","value":"yarn tweet","position":{"start":{"line":6,"column":211,"offset":490},"end":{"line":6,"column":223,"offset":502},"indent":[]}},{"type":"text","value":" which executes a script. ","position":{"start":{"line":6,"column":223,"offset":502},"end":{"line":6,"column":249,"offset":528},"indent":[]}},{"type":"inlineCode","value":"0 10,16 * * *","position":{"start":{"line":6,"column":249,"offset":528},"end":{"line":6,"column":264,"offset":543},"indent":[]}},{"type":"text","value":" to be precise. That is 1530 hrs and 2130 hrs IST to be precise.","position":{"start":{"line":6,"column":264,"offset":543},"end":{"line":6,"column":328,"offset":607},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":280},"end":{"line":6,"column":328,"offset":607},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I have a ","position":{"start":{"line":8,"column":1,"offset":609},"end":{"line":8,"column":10,"offset":618},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/aravindballa/learningcurve.dev/blob/master/scripts/getQuote.js","children":[{"type":"text","value":"script","position":{"start":{"line":8,"column":11,"offset":619},"end":{"line":8,"column":17,"offset":625},"indent":[]}}],"position":{"start":{"line":8,"column":10,"offset":618},"end":{"line":8,"column":101,"offset":709},"indent":[]}},{"type":"text","value":" which fetches a random quote from the transcripts (which are in the repo as markdown files) and then tweets it using ","position":{"start":{"line":8,"column":101,"offset":709},"end":{"line":8,"column":219,"offset":827},"indent":[]}},{"type":"link","title":null,"url":"/twitter","children":[{"type":"text","value":"[[Twitter]]","position":{"start":{"line":8,"column":220,"offset":828},"end":{"line":8,"column":231,"offset":839},"indent":[]}}],"position":{"start":{"line":8,"column":219,"offset":827},"end":{"line":8,"column":242,"offset":850},"indent":[]}},{"type":"text","value":" API.","position":{"start":{"line":8,"column":242,"offset":850},"end":{"line":8,"column":247,"offset":855},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":609},"end":{"line":8,"column":247,"offset":855},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":11,"column":1,"offset":858},"end":{"line":11,"column":31,"offset":888},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":11,"column":31,"offset":888}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"How can people come to know about what you speak in the podcasts without listening to them?\"), mdx(\"p\", null, \"A half baked solution I figured out is to tweet about the things we speak in the episode occasionally. So, by looking at the twitter feed, one can get a feel for what we actually talk.\"), mdx(\"p\", null, \"I built this with the help of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/github\"\n  }), \"[[GitHub]]\"), \" Actions. I have an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/aravindballa/learningcurve.dev/blob/master/.github/workflows/tweet.yml\"\n  }), \"action\"), \" which runs on a cron schedule and runs \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn tweet\"), \" which executes a script. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0 10,16 * * *\"), \" to be precise. That is 1530 hrs and 2130 hrs IST to be precise.\"), mdx(\"p\", null, \"I have a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/aravindballa/learningcurve.dev/blob/master/scripts/getQuote.js\"\n  }), \"script\"), \" which fetches a random quote from the transcripts (which are in the repo as markdown files) and then tweets it using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/twitter\"\n  }), \"[[Twitter]]\"), \" API.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`How can people come to know about what you speak in the podcasts without listening to them?`}</p>\n    <p>{`A half baked solution I figured out is to tweet about the things we speak in the episode occasionally. So, by looking at the twitter feed, one can get a feel for what we actually talk.`}</p>\n    <p>{`I built this with the help of `}<a parentName=\"p\" {...{\n        \"href\": \"/github\"\n      }}>{`[[GitHub]]`}</a>{` Actions. I have an `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/aravindballa/learningcurve.dev/blob/master/.github/workflows/tweet.yml\"\n      }}>{`action`}</a>{` which runs on a cron schedule and runs `}<inlineCode parentName=\"p\">{`yarn tweet`}</inlineCode>{` which executes a script. `}<inlineCode parentName=\"p\">{`0 10,16 * * *`}</inlineCode>{` to be precise. That is 1530 hrs and 2130 hrs IST to be precise.`}</p>\n    <p>{`I have a `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/aravindballa/learningcurve.dev/blob/master/scripts/getQuote.js\"\n      }}>{`script`}</a>{` which fetches a random quote from the transcripts (which are in the repo as markdown files) and then tweets it using `}<a parentName=\"p\" {...{\n        \"href\": \"/twitter\"\n      }}>{`[[Twitter]]`}</a>{` API.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}